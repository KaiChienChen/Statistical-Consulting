---
title: "HW"
subtitle: "Diamond Prices2022"
date: today
author: H24101222_陳凱騫
format:
 pdf:
    include-in-header:
      - text: |
         \usepackage{setspace,relsize}
         \usepackage{geometry}
         \geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
         \setmonofont{Microsoft JhengHei UI}  
mainfont: "Microsoft JhengHei UI"
# mainfont: "Microsoft JhengHei Bold"
toc: true
documentclass: article
pdf-engine: xelatex
execute:
  tidy: true
  echo: true
  warning: false
  message: false
---

# Loading data
```{r}
library(ggplot2)
library(knitr)
data <- read.csv("Diamonds Prices2022.csv")
kable(head(data), caption= "A table of head of dataset")
```

# Summary Statistics

```{r}
#| output: asis
library(Hmisc)
latex(describe(data), file = "", caption.placement = "top")
```

從以上之EDA我們可知其類別型資料分別為cut、color、clarity，而數值型分別為caret、depth、table、price、x、y、z。

# Missing value

```{r}
#| output: asis
library(DataExplorer)
plot_missing(data)
```

從上圖可知並未有missing data在這個資料集中。

# Boxplot

```{r}
#Boxplot of Price by Cut
ggplot(data, aes(x = cut, y = price)) +
  geom_boxplot(fill = "orange") +
  labs(title = "Boxplot of Price by Cut", x = "Cut", y = "Price (USD)")
```
```{r}
ggplot(data, aes(x = color, y = price)) +
  geom_boxplot(fill = "orange") +
  labs(title = "Boxplot of Price by Color", x = "Color", y = "Price (USD)")
```
```{r}
ggplot(data, aes(x = clarity, y = price)) +
  geom_boxplot(fill = "orange") +
  labs(title = "Boxplot of Price by Clarity", x = "Clarity", y = "Price (USD)")
```

都很右偏。

```{r}
library(ggplot2)
# Remove the unnecessary X column and check for zero values in dimensions
diamonds_data <- data
diamonds_data$X <- NULL
# Remove rows with zero dimensions (likely errors)
diamonds_clean <- diamonds_data

# Create correlation plot for numerical variables
library(corrplot)
numerical_vars <- diamonds_clean[, c("carat", "depth", "table", "price", "x", "y", "z")]
correlation_matrix <- cor(numerical_vars)
corrplot(correlation_matrix, method = "color", type = "upper", 
         addCoef.col = "black", number.cex = 0.7)
```

- Correlation matrix showing strong relationships between size metrics (x,y,z) and price

```{r}
# Create price distribution plot
ggplot(diamonds_clean, aes(x = price)) +
  geom_histogram(fill = "blue", alpha = 0.5) +
  theme_minimal() +
  labs(title = "Distribution of Diamond Prices",
       x = "Price", y = "Count")
```

- Price distribution is right-skewed
- 之後取log

```{r}
# Create scatter plot of carat vs price with cut color
ggplot(diamonds_clean, aes(x = carat, y = price, color = cut)) +
  geom_point(alpha = 0.5) +
  theme_minimal() +
  labs(title = "Price vs Carat by Cut",
       x = "Carat", y = "Price")
```

# encoding

```{r}
# 替換類別變數為數字編碼
library(dplyr)
diamonds_clean$cut <- recode(diamonds_clean$cut,Fair=1,Good=2,Ideal=3,Premium=4,`Very Good`=5)
diamonds_clean$color <- recode(diamonds_clean$color,D=1,E=2,`F`=3,G=4,H=5,I=6,J=7)
diamonds_clean$clarity <- recode(diamonds_clean$clarity,
  I1 = 1, IF = 2, SI1 = 3, SI2 = 4, VS1 = 5, VS2 = 6, VVS1 = 7, VVS2 = 8
)
```

- 將類別資料轉成數值

# data fitting

```{r}
library(caret)
# Set seed for reproducibility
set.seed(123)

# Split the data into training and testing sets
trainIndex <- createDataPartition(diamonds_clean$price, p = 0.8, 
                                  list = FALSE, 
                                  times = 1)

diamonds_train <- diamonds_clean[trainIndex, ]

diamonds_test <- diamonds_clean[-trainIndex, ]

# Build the linear regression model
lm_model <- lm(log(price) ~ carat + cut + color + clarity + depth + table + x + y + z, 
               data = diamonds_train)

# Summarize the model
summary(lm_model)
```

The result shows a strong fit with an adjusted $R^{2}$ of 0.9452, indicating that the model explains approximately 94.52% of the variance in diamond prices.

```{r}
# Predict prices on the test set
predictions <- predict(lm_model, newdata = diamonds_test)

# Calculate performance metrics
mse <- mean((predictions - diamonds_test$price)^2)
rmse <- sqrt(mse)

# Print the RMSE
print(paste('Root Mean Squared Error (RMSE):', round(rmse, 2)))
```

The linear regression model shows strong predictive power with an R-squared of 0.94 and RMSE of 5552.98. Key findings:

- depth, cut, clarity, x, y, z got a significant positive coefficient meaning that when they increase one unit, the price will also increase.
- color, caret and table got a  significant negative coefficient meaning that when they increase one unit, the price will also increase.
```{r}
# Plot residuals to check for patterns
library(ggplot2)
residuals <- diamonds_test$price - predictions

# Residual plot
residual_plot <- ggplot(data = diamonds_test, aes(x = predictions, y = residuals)) +
  geom_point(alpha = 0.5) +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  theme_minimal() +
  labs(title = "Residuals vs Fitted Values",
       x = "Fitted Values",
       y = "Residuals")

# Display the plot
print(residual_plot)
```

By the residual plot, we think that non-linear regression might fit the data. Besides, because we know x, y, and z are highly correlation, we check whether the multicollinearity exist.

```{r}
# Check VIF for multicollinearity
# install.packages("car")
library(car)
vif_model <- lm(log(price) ~ carat + cut + color + clarity + depth + table + x + y + z, data = diamonds_train)
vif(vif_model)

# Compare R-squared values
print("Original R-squared:")
print(summary(lm_model)$r.squared)
# Calculate VIF for the model to check for multicollinearity
```

